package com.zzuli.solar;

import java.awt.Graphics;
import java.awt.Image;

import com.zzuli.util.Constant;
import com.zzuli.util.GameUtil;
import com.zzuli.util.MyFrame;

/** 
* @author Hejjon
* 创建时间：2018年10月31日 下午11:27:18 
* 
* 太阳系的主窗口
*/
public class SolarFrame extends MyFrame {
	Image bg = GameUtil.getImage("images/bg.png");
	Star sun = new Star("images/Sun.png", Constant.GAME_WIDTH / 2 - 35, 
			Constant.GAME_HEIGHT / 2 - 35);
	
	Planet mars = new Planet(sun, "images/Mars.png", Constant.MARS_LONGAXIS, 
			Constant.MARS_SHORTAXIS, Constant.MARS_SPEED);
	
	Planet earth = new Planet(sun, "images/Earth.png", Constant.EARTH_LONGAXIS, 
			Constant.EARTH_SHORTAXIS, Constant.EARTH_SPEED);
	
	Planet moon = new Planet(earth, "images/Moon.png", Constant.MOON_LONGAXIS, 
			Constant.MOON_SHORTAXIS, Constant.MOON_SPEED, true);
	
	Planet eris = new Planet(sun, "images/Eris.png", Constant.ERIS_LONGAXIS, 
			Constant.ERIS_SHORTAXIS, Constant.ERIS_SPEED);
	
	Planet saturn = new Planet(sun, "images/Saturn.png", Constant.SATURN_LONGAXIS, 
			Constant.SATURN_SHORTAXIS, Constant.SATURN_SPEED);
	
	
	public void paint(Graphics g) {
		g.drawImage(bg, 0, 0, Constant.GAME_WIDTH, Constant.GAME_HEIGHT, null);
		sun.draw(g);
		mars.draw(g);
		earth.draw(g);
		moon.draw(g);
		eris.draw(g);
		saturn.draw(g);
	} 
	
	//双缓冲技术解决闪屏问题
		private Image offScreenImage = null;
		 
		public void update(Graphics g) {
		    if(offScreenImage == null)
		        offScreenImage = this.createImage(Constant.GAME_WIDTH,Constant.GAME_HEIGHT);//这是游戏窗口的宽度和高度
		     
		    Graphics gOff = offScreenImage.getGraphics();
		    paint(gOff);
		    g.drawImage(offScreenImage, 0, 0, null);
		}
		
	public static void main(String[] args) {
		new SolarFrame().launchFrame();
	}
}


package com.zzuli.solar;

import java.awt.Graphics;
import java.awt.Image;

import javax.swing.ImageIcon;

import com.zzuli.util.GameUtil;

/** 
* @author Hejjon
* 创建时间：2018年10月31日 下午11:16:24 
* 
* 中心天体类, 类似于太阳的中心天体
*/
public class Star {
	Image img;
	double x;		//位置
	double y;
	
	int width;		//图片大小
	int height;
	
	//画星星的方法
	public void draw(Graphics g) {
		g.drawImage(img, (int) x, (int) y, null);		
	}
	
	//构造器
	public Star() {
		
	}
	
	public Star(Image img) {
		this.img = img;
		new ImageIcon(img).getImage();
		this.width = img.getWidth(null);
		this.height = img.getHeight(null);
	}
	
	public Star(Image img, double x, double y) {
		this(img);
		this.x = x;
		this.y = y;
	}

	//传入图片的路径即可
	public Star(String imgpath, double x, double y) {
		this(GameUtil.getImage(imgpath), x, y);			//通过this调用同一类中另一个构造器
	}
}



 package com.zzuli.solar;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import com.zzuli.util.GameUtil;

/** 
* @author Hejjon
* 创建时间：2018年11月1日 下午4:45:13 
* 
* 行星类
*/
public class Planet extends Star {
	
	//天体属性
	double longAxis;		//椭圆轨道的半长轴
	double shortAxis;		//椭圆轨道的半短轴
	double speed;			//飞行速度
	double degree = 0;		//角度
	Star center;			//中心天体
	boolean issatellite;	//是否是卫星

	public Planet(Image img, double x, double y) {
		super(img, x, y);
	}
	
	public Planet(String imgpath, double x, double y) {
		super(imgpath, x, y);
	}

	public Planet(Star center, String imgpath, double longAxis,
			double shortAxis, double speed) {
		
		super(GameUtil.getImage(imgpath));
		this.x = center.x + longAxis;
		this.y = center.y;
		this.longAxis = longAxis;
		this.shortAxis = shortAxis;
		this.speed = speed;
		this.center = center;
	}
	
	public Planet(Star center, String imgpath, double longAxis,
			double shortAxis, double speed, boolean issatellite) {
		
		this(center, imgpath, longAxis, shortAxis, speed);
		this.issatellite = issatellite;
	}


	@Override
	public void draw(Graphics g) {
		super.draw(g);
		move();
		if (!issatellite) {
			drawTrace(g);
		}
	}
	
	//绘制运行椭圆轨迹
	public void drawTrace(Graphics g) {
		
		double ovalX, ovalY, ovalWidth, ovalHeight;
		ovalWidth = longAxis * 2;
		ovalHeight = shortAxis * 2;
		ovalX = center.x + center.width / 2 - longAxis;
		ovalY = center.y + center.height / 2 - shortAxis;
		
		//设置轨迹颜色
		Color c = g.getColor();
		g.setColor(Color.blue);
		g.drawOval((int)ovalX, (int)ovalY, (int)ovalWidth, (int)ovalHeight);
		g.setColor(c);
	}
	
	//沿着椭圆轨道飞行
	public void move() {
		x = (center.x + center.width / 2 - this.width / 2) + longAxis * Math.cos(degree);
		y = (center.y + center.height / 2 - this.height / 2) + shortAxis * Math.sin(degree);
		degree = degree + speed;	
	}
	
	
}
